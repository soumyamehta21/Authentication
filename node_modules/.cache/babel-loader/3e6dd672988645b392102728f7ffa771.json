{"ast":null,"code":"var _jsxFileName = \"/home/mtech/Documents/ReactJS Training/Authentication/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport classes from \"./AuthForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n\n    if (isLogin) {\n      fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyANU4QC_61xJYh3WSUyk1wnmCL6Fr3YY00\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        if (response.ok) {} else {\n          return response.json().then(data => {\n            // alert(data.error.errors[0].message);\n            throw new Error('Authentication Failed');\n          });\n        }\n      });\n    } else {\n      fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyANU4QC_61xJYh3WSUyk1wnmCL6Fr3YY00\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        setIsLoading(false);\n\n        if (response.ok) {\n          return response.json();\n        } else {\n          return response.json().then(data => {\n            // alert(data.error.errors[0].message);\n            throw new Error('Authentication Failed');\n          });\n        }\n      }).then(data => {\n        console.log(\"Successfull\");\n      }).catch(err => {\n        alert(err.message);\n      });\n    }\n\n    emailInputRef.current.value = \"\";\n    passwordInputRef.current.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: emailInputRef,\n          type: \"email\",\n          id: \"email\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: passwordInputRef,\n          type: \"password\",\n          id: \"password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"RqwvK/AX/XkSKVStQBnmgxX0L/M=\");\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/home/mtech/Documents/ReactJS Training/Authentication/src/components/Auth/AuthForm.js"],"names":["useState","useRef","classes","AuthForm","emailInputRef","passwordInputRef","isLogin","setIsLogin","isLoading","setIsLoading","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","response","ok","json","data","Error","console","log","catch","err","alert","message","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\n\nimport classes from \"./AuthForm.module.css\";\n\nconst AuthForm = () => {\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true);\n\n    if (isLogin) {\n      fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyANU4QC_61xJYh3WSUyk1wnmCL6Fr3YY00\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: enteredEmail,\n            password: enteredPassword,\n            returnSecureToken: true,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      ).then((response) => {\n        if(response.ok){\n\n        }else{\n          return response.json().then((data) => {\n            // alert(data.error.errors[0].message);\n            throw new Error('Authentication Failed');\n          });\n        }\n      })\n    } else {\n      fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyANU4QC_61xJYh3WSUyk1wnmCL6Fr3YY00\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: enteredEmail,\n            password: enteredPassword,\n            returnSecureToken: true,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      ).then((response) => {\n        setIsLoading(false);\n        if (response.ok) {\n          return response.json();\n        } else {\n          return response.json().then((data) => {\n            // alert(data.error.errors[0].message);\n            throw new Error('Authentication Failed');\n          });\n        }\n      }).then((data) => {\n        console.log(\"Successfull\")\n      }).catch((err) => {\n        alert(err.message);\n      });\n    }\n\n    emailInputRef.current.value = \"\";\n    passwordInputRef.current.value = \"\";\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input ref={emailInputRef} type=\"email\" id=\"email\" required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            ref={passwordInputRef}\n            type=\"password\"\n            id=\"password\"\n            required\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Loading...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}